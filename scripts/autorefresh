#!/usr/bin/ruby

trap "INT" do
  puts
  system 'tput cnorm'
  exit 0
end

if ARGV.empty?
  puts "Usage: autorefresh command"
  puts "Put the command in quotes to ensure that the shell passes it as a " +
       "single argument"
  exit 1
end

def wrap_and_truncate(text, cols, lines)
  current_cols = 0
  current_lines = 0
  result = ''
  i = 0
  while (i < text.length && current_lines < lines) do
    if current_cols == cols && text[i] != "\n" then
      result << "\n"
      current_lines += 1
      current_cols = 0
    end

    if text[i..i+1] == "\u001b[" then
      # Consume the whole control sequence without incrementing current_cols
      j = i + 2
      while (j < text.length && (text[j] < 0x40.chr || text[j] > 0x7E.chr)) do
        j += 1
      end
      j += 1
      result << text[i...j]
      i = j
      next
    end

    result << text[i]

    if text[i] == "\n" then
      current_lines += 1
      current_cols = 0
      i += 1
      next
    end

    i += 1
    current_cols += 1
  end
  return result
end

head = true
if ARGV.delete '-nohead'
  head = false
end

command, canary = ARGV

system 'tput civis'

lines = ''
numlines = 0

canary_result = nil
loop do
  newnumlines = `tput lines`.to_i
  cols = `tput cols`.to_i

  if canary
    new_canary_result = `#{canary}` + newnumlines.to_s + '.' + cols.to_s
    if canary_result == new_canary_result
      sleep 1
      next
    end
    canary_result = new_canary_result
  end

  if head
    newlines = wrap_and_truncate(`#{command}`, cols, newnumlines - 1)
  else
    newlines = `#{command}`
  end

  if lines != newlines || numlines != newnumlines
    system 'clear'
    print (newlines.strip)
    STDOUT.flush
    lines = newlines
    numlines = newnumlines
  end
  sleep 1
end
